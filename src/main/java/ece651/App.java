/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ece651;

import java.util.HashMap;
import java.util.Scanner;

public class App {
  //this is game flow
    public String getGreeting() {
        return "Welcome to Sally's Stash!";
    }

  public static void comChoose(Board Myboard, Board Opboard,String name) {
    //computer choose move
    Computer com=new Computer();
    //Draw draw = new Draw();
    while(true){
      //run until make a valid move
      String command = com.getAction();
    if (command.equals("D")) {
      comDig(Opboard,name);
      //draw.printGame(Myboard, Opboard);
      break;
    }
    if (command.equals("M")&& Myboard.countM()>0) {
      comMove(Myboard);
      Myboard.minusM();
      //draw.printGame(Myboard, Opboard);
      break;
    }
    if (command.equals("S")&& Myboard.countS()>0) {
     comScan(); 
     Myboard.minusS();
     //draw.printGame(Myboard, Opboard);
     break;
    }
    
  }
  }
 

    public static void comPlacing(int count, String color, int dimen, Board board) {
      //computer places stacks
      while (count > 0) {
        Computer cc = new Computer();
        Stash stash = new Stash(color.charAt(0), dimen, cc.getX(), cc.getY());
        if (color.charAt(0) == 'G' || color.charAt(0) == 'P') {
          stash.orient(cc.getNormM());
        } else {
          stash.orient(cc.getCrazy());
        }

        if (board.addStash(stash)) {
          count--;
        }
      }
    }


  public static void comDig(Board Opboard,String name) {
    //computer dig move
     Computer cc = new Computer();
     Opboard.dig(cc.getX(), cc.getY(),name);
   }

  public static void comMove(Board MyB) {
    //computer move stack
    MyB.comMove();
    System.out.print("\n--------------------------------------------------------------------------------\n");
    System.out.println("Computer used a special action");
    System.out.print("\n--------------------------------------------------------------------------------\n");
  }

  public static void comScan(){
    //computer scan
    System.out.print("\n--------------------------------------------------------------------------------\n");
    System.out.println("Computer used a special action");
    System.out.print("\n--------------------------------------------------------------------------------\n");
  }

  
  public static void placing(int count,String color,int dimen,Board board,Scanner sc,String name) {  
    //human player place the stacks
    Draw draw = new Draw();
    while (count > 0) {
          System.out.println("\nPlayer "+name+", you are going place Sally’s stash on the board. Make sure the other player isn’t looking! For each stack, type the coordinate of the upper left side of the stash, followed by either H (for horizontal) or V (for vertical). For example, M4H would place a stack horizontally starting at M4 and going to the right. You have:\n2 Green stacks that are 1x2\n3 Purple stacks that are 1x3\n3 Red Superstacks\n3 Blue Crazystacks\n");
          System.out.println("Now please place your " +color+ " stash. You have "+count+" piece.\n");
          String command = sc.next();
          Parsing parsing = new Parsing(command);
          //check command validation
          while (command.length() != 3||parsing.checkParErr()) {
            System.out.println("Command is not valid. Please try again!");
            command = sc.next();
            parsing = new Parsing(command);
          }
          
          Stash stash = new Stash(color.charAt(0), dimen, parsing.getX(), parsing.getY());

          stash.orient(parsing.getOri());
          //only reduce the number of stacks waiting to put when adding successfully
          if (board.addStash(stash)) {
            count--;
            draw.printBoard(board);
          }
          
        }
   
    }

  public static boolean scan(Board OpB,Scanner sc) {
    //human scan 
    Draw draw = new Draw();
    draw.printOpBoard(OpB);
    System.out.print("Here is your sonar. It reports the number of squares occupied by each type of stack in that region.\n");
    System.out.print("   *   \n  ***  \n ***** \n***C***\n ***** \n  ***  \n   *   \n");
    System.out.print("Choose a location to put your sonar:\n");
    String command = sc.next();
    Parsing parsing = new Parsing(command);
    //if the command is invalid, return false and choose the movement again
    if (parsing.checkParErr()) {
      return false;
    }
    HashMap<Character, Integer> find = OpB.sonar(parsing.getX(), parsing.getY());
    System.out.println("\nGreen stacks occupy "+find.get('G')+" squares.\n");
    System.out.println("Purple stacks occupy "+find.get('P')+" squares.\n");
    System.out.println("Red stacks occupy "+find.get('R')+" squares.\n");
    System.out.println("Blue stacks occupy "+find.get('B')+" squares.\n");
    return true;
  }
  
  public static boolean move(Board MyB, Scanner sc) {
    //human move
    Draw draw = new Draw();
    draw.printMyBoard(MyB);
    System.out.print("Which stack do you want to move? Choose a location:\n");
    String command = sc.next();
    Parsing parsing = new Parsing(command);
    System.out.print("Where do you want to move to? Choose a location and an orientation(i.e. C6U):\n");
    command=sc.next();
    Parsing parsingN = new Parsing(command);
    //if move fails, return false and choose movement
    return MyB.move(parsing.getX(), parsing.getY(), parsingN.getX(), parsingN.getY(),parsingN.getOri());
  }
  
  public static void choose(Board Myboard, Board Opboard, Scanner sc, String name) {
    //human choose move
    while(true){
    System.out.print("\n--------------------------------------------------------------------------------\n");
    System.out.print("Possible actions for Player "+name+":\n");
    System.out.print("\nD Dig in a square\nM Move a stack to another square ("+Myboard.countM()+" remaining)\nS Sonar scan ("+Myboard.countS()+" remaining)\n");
    System.out.print("\nPlayer "+name+", what would you like to do?\n");
    System.out.print("--------------------------------------------------------------------------------\n");
    String command = sc.next();
    command = command.toUpperCase();
    if (command.equals("D")) {
      dig(Myboard, Opboard, sc, name);
      break;
    }
    //when moves success, minus the number of them
    if (command.equals("M")&& Myboard.countM()>0) {
      if (move(Myboard, sc)) {
        Myboard.minusM();
        break;
      }
    }
    if (command.equals("S")&& Myboard.countS()>0) {
      if (scan(Opboard, sc)) {
        Myboard.minusS();
        break;
      }
    }
    System.out.println("Invalid commands or you run out of your skills. Please try again!\n");
  }
  }
  
  
  public static void dig(Board Myboard,Board Opboard,Scanner sc,String name) {
    //human dig
      Draw draw = new Draw();
      System.out.println("Player "+name+"'s turn:");
      draw.printGame(Myboard,Opboard);
      System.out.println("Choose one place to dig:");
      String command = sc.next();
      Parsing parsing = new Parsing(command);
      //keep asking player to enter loction, while the location is invalid
      while (command.length() != 2||parsing.checkParErr()) {
            System.out.println("Command is not valid. Please try again!");
            command = sc.next();
            parsing = new Parsing(command);
          }
      
      Opboard.dig(parsing.getX(), parsing.getY(),name);
    }

  
    public static void main(String[] args) {
      Draw draw = new Draw();
      System.out.println(new App().getGreeting());
      Scanner sc = new Scanner(System.in);
      //decide computer or human
      System.out.println("Hello player A, who are you?(Choose the number below)\n 1.Human\n 2.Computer");
      String playA = sc.next();
      while(!playA.equals("1")&&!playA.equals("2")){
        System.out.println("Can't recognize your command! Please enter 1 or 2!");
        System.out.println("Hello player A, who are you?(Choose the number below)\n 1.Human\n 2.Computer");
        playA = sc.next();
      }
      System.out.println("Hello player B, who are you?(Choose the number below)\n 1.Human\n 2.Computer");
      String playB = sc.next();
      while(!playB.equals("1")&&!playB.equals("2")){
        System.out.println("Can't recognize your command! Please enter 1 or 2!");
        System.out.println("Hello player B, who are you?(Choose the number below)\n 1.Human\n 2.Computer");
        playB = sc.next();
      }
      //game flow
      Board Ab = new Board();
      Board Bb = new Board();
      if (playA.equals("1")) {
        placing(2,"Green",2,Ab,sc,"A");
        placing(3,"Purple",3,Ab,sc,"A");
        placing(3,"Red",4,Ab,sc,"A");
        placing(3,"Blue",6,Ab,sc,"A");
      } else {
        comPlacing(2, "Green", 2, Ab);
        comPlacing(3, "Purple", 3, Ab);
        comPlacing(3, "Red", 4, Ab);
        comPlacing(3, "Blue", 6, Ab);
      }
      if(playB.equals("1")){
        placing(2,"Green",2,Bb,sc,"B");
        placing(3,"Purple",3,Bb,sc,"B");
        placing(3,"Red",4,Bb,sc,"B");
        placing(3, "Blue", 6, Bb, sc, "B");
      } else {
        comPlacing(2, "Green", 2, Bb);
        comPlacing(3, "Purple", 3, Bb);
        comPlacing(3, "Red", 4, Bb);
        comPlacing(3, "Blue", 6, Bb);
      }
      while(Ab.checkWinner()&&Bb.checkWinner()){
        if (playA.equals("1")) {
          choose(Ab, Bb, sc, "A");
        } else {
          comChoose(Ab, Bb,"A");
        }
        if (!Bb.checkWinner()) {
          System.out.println("A is the winner!");
          draw.printGame(Ab,Bb);
          break;
        }
        if (playB.equals("1")) {
          choose(Bb, Ab, sc, "B");
        }else {
          comChoose(Bb, Ab,"B");
        }
        if (!Ab.checkWinner()) {
          System.out.println("B is the winner!");
          draw.printGame(Ab,Bb);
        }
      }
      sc.close();
    }
}
